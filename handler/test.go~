package handler

import (
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"net/http"
	"test-assignment-cookie-sync/service"
)

type cookieHandler struct {
	*service.CookieS
}

func NewCookieHandler(sync *service.CookieS) cookieHandler {
	return cookieHandler{sync}
}

func (sync cookieHandler) Notify(w http.ResponseWriter, r *http.Request) {
	m, err := readData(r, "cookie_id")
	if err != nil {
		responseBuilder(w, http.StatusBadRequest, fmt.Errorf("parse body: %v", err))
		return
	}
	err = sync.CookieS.ProcessNotify(r.Context(), m["cookie_id"].(string))
	if err != nil {
		responseBuilder(w, http.StatusInternalServerError)
		return
	}
	w.WriteHeader(http.StatusOK)
	w.Header().Set("Access-Control-Allow-Origin", "*")
	w.Write([]byte("success"))
}

func (sync cookieHandler) Cookie(w http.ResponseWriter, r *http.Request) {
	cookie, err := sync.CookieS.ProcessCookie(r.Context())
	if err != nil {
		responseBuilder(w, http.StatusInternalServerError)
		return
	}
	b, err := json.Marshal(cookie)
	w.WriteHeader(http.StatusOK)
	w.Header().Set("Access-Control-Allow-Origin", "*")
	w.Write(b)
}

// readData reads incoming body and checks for specified fields in it
func readData(req *http.Request, fields ...string) (map[string]interface{}, error) {
	if req.Body == nil {
		return nil, errors.New("no data in body")
	}
	var input map[string]interface{}
	if err := json.NewDecoder(req.Body).Decode(&input); err != nil {
		if err == io.EOF {
			return nil, err
		}
		return nil, err
	}
	return input, checkData(input, fields...)
}

func checkData(m map[string]interface{}, fields ...string) error {
	if fields != nil {
		for _, v := range fields {
			if _, ok := m[v]; !ok {
				return fmt.Errorf("field %s must be exists", v)
			}
		}
	}
	return nil
}
